version: 2.1
orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1
  kubernetes: circleci/kubernetes@1.0.0

jobs:
  build-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Application build
          command: |
            cd helloworld
            npm install
      - save_cache:
          paths: [helloworld/node_modules]
          key: helloworld-{{ checksum "helloworld/package.json" }}
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-app:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - helloworld-{{ checksum "helloworld/package.json" }}
            - helloworld-

      - run:
          name: scan-app run
          command: |
            echo {checksum "helloworld/package.json"}
            cd helloworld
            npm install
            npm audit --audit-level=critical

  create-kubernetes-cluster:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - aws-cli/setup
      - kubernetes/install-kubectl
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

      - run:
          name: Create kubernetes cluster
          command: |
            clusterName="capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            eksctl create cluster --name=$clusterName --region=us-east-1 --zones=us-east-1a,us-east-1b
            curl -k https://kvdb.io/${KVDB_BUCKET_ID}/clusterName \
                                        -u "${KVDB_SECRET_KEY}:" \
                                        -d $clusterName

  deploy-app:
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_USER
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - aws-cli/setup
      - kubernetes/install-kubectl
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: Linting Dockerfile
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod a+x /bin/hadolint
            sudo hadolint Dockerfile
      - run:
          name: Containerize Application and Push Image
          command: |
            docker build -t udacitycapstone .
            docker image ls
            dockerpath="$DOCKER_USER/udacitycapstone:${CIRCLE_WORKFLOW_ID:0:7}"
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
            docker tag udacitycapstone $dockerpath
            docker push $dockerpath

      - run:
          name: Deploy to Kubernete cluster
          command: |
            export clusterName=$(curl -k https://kvdb.io/${KVDB_BUCKET_ID}/clusterName \
                                        -u "${KVDB_SECRET_KEY}:")
            dockerpath="$DOCKER_USER/udacitycapstone:${CIRCLE_WORKFLOW_ID:0:7}"
            aws eks --region us-east-1 update-kubeconfig --name ${clusterName}
            export KUBECONFIG=/home/circleci/.kube/config
            if kubectl get deployment capstone-deployment ; then
              echo "Updating deployment to ${CIRCLE_WORKFLOW_ID:0:7}"
              kubectl set image deployment/capstone-deployment udacitycapstone=$dockerpath
            else
              kubectl create deploy capstone-deployment --image=$dockerpath
              kubectl expose deployment capstone-deployment --type=LoadBalancer --name=capstoneservice --port=80 --target-port=3000
              sleep 1m
            fi

            kubectl rollout status deployment/capstone-deployment
      - run:
          name: "Check the nodes"
          command: |
            kubectl get nodes
      - run:
          name: "Check the deployments"
          command: |
            kubectl get deployments
      - run:
          name: "Check the pods"
          command: |
            kubectl get pods -o wide
      - run:
          name: "Check the service"
          command: |
            kubectl get service/truonghpd-capstone-service
      - run:
          name: Store app endpoint
          command: |
            api=""
            while [ -z $api ]; do
              api=$(kubectl get services capstoneservice --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
              [ -z "$api" ] && sleep 15
            done
            sleep 1m
            echo 'Found external hostname: '$api
            echo $api >> ~/app-endpoint.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - app-endpoint.txt

      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

  smoke-test:
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - aws-cli/setup
      - kubernetes/install-kubectl
      - attach_workspace:
          at: ~/
      - run:
          name: Smoke test.
          command: |
            export APP_ENDPOINT=$(cat ~/app-endpoint.txt)
            echo ${APP_ENDPOINT}
            resullt=$(curl ${APP_ENDPOINT})
            echo "Check if response contain 'Hi there' text to make sure that api is ok"
            if echo $resullt | grep "Hi there"
            then
              curl -k https://kvdb.io/${KVDB_BUCKET_ID}/clusterName \
                    -u "${KVDB_SECRET_KEY}:" \
                    -d ${CIRCLE_WORKFLOW_ID:0:7}
              exit 0
            else
              echo $resullt
              exit 1
            fi
      
      - run:
          name: Rolling back to previous version
          when: on_fail
          command: |
            export clusterName=$(curl -k https://kvdb.io/${KVDB_BUCKET_ID}/clusterName \
                          -u "${KVDB_SECRET_KEY}:")
            aws eks --region us-east-1 update-kubeconfig --name ${clusterName}
            export KUBECONFIG=/home/circleci/.kube/config
            kubectl rollout undo deployment/capstone-deployment
            kubectl rollout status deployment/capstone-deployment
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1

workflows:
  default:
    jobs:
      - build-app
      - scan-app:
          requires: [build-app]
      - create-kubernetes-cluster:
          requires: [scan-app]
      - deploy-app:
          requires: [create-kubernetes-cluster]
      - smoke-test:
          requires: [deploy-app]
